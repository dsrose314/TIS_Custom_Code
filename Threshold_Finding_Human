#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This experiment was created using PsychoPy3 Experiment Builder (v2024.2.4),
    on May 26, 2025, at 12:33
If you publish work using this script the most relevant publication is:

    Peirce J, Gray JR, Simpson S, MacAskill M, Höchenberger R, Sogo H, Kastman E, Lindeløv JK. (2019) 
        PsychoPy2: Experiments in behavior made easy Behav Res 51: 195. 
        https://doi.org/10.3758/s13428-018-01193-y

"""

# --- Import packages ---
from psychopy import locale_setup
from psychopy import prefs
from psychopy import plugins
plugins.activatePlugins()
prefs.hardware['audioLib'] = 'ptb'
prefs.hardware['audioLatencyMode'] = '3'
from psychopy import sound, gui, visual, core, data, event, logging, clock, colors, layout, hardware
from psychopy.tools import environmenttools
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED,
                                STOPPED, FINISHED, PRESSED, RELEASED, FOREVER, priority)

import numpy as np  # whole numpy lib is available, prepend 'np.'
from numpy import (sin, cos, tan, log, log10, pi, average,
                   sqrt, std, deg2rad, rad2deg, linspace, asarray)
from numpy.random import random, randint, normal, shuffle, choice as randchoice
import os  # handy system and path functions
import sys  # to get file system encoding

import psychopy.iohub as io
from psychopy.hardware import keyboard

# Run 'Before Experiment' code from code_3
import sys
sys.path.append("c:\\users\\rose\\appdata\\roaming\\python\\python310\\site-packages")  # Append path to `pyvisa`

import pyvisa
import time
from psychopy import visual



# --- Setup global variables (available in all functions) ---
# create a device manager to handle hardware (keyboards, mice, mirophones, speakers, etc.)
deviceManager = hardware.DeviceManager()
# ensure that relative paths start from the same directory as this script
_thisDir = os.path.dirname(os.path.abspath(__file__))
# store info about the experiment session
psychopyVersion = '2024.2.4'
expName = 'Threshold_Finding_final021224'  # from the Builder filename that created this script
# information about this experiment
expInfo = {
    'participant': f"{randint(0, 999999):06.0f}",
    'session': '001',
    'date|hid': data.getDateStr(),
    'expName|hid': expName,
    'psychopyVersion|hid': psychopyVersion,
}

# --- Define some variables which will change depending on pilot mode ---
'''
To run in pilot mode, either use the run/pilot toggle in Builder, Coder and Runner, 
or run the experiment with `--pilot` as an argument. To change what pilot 
#mode does, check out the 'Pilot mode' tab in preferences.
'''
# work out from system args whether we are running in pilot mode
PILOTING = core.setPilotModeFromArgs()
# start off with values from experiment settings
_fullScr = True
_winSize = (1024, 768)
# if in pilot mode, apply overrides according to preferences
if PILOTING:
    # force windowed mode
    if prefs.piloting['forceWindowed']:
        _fullScr = False
        # set window size
        _winSize = prefs.piloting['forcedWindowSize']

def showExpInfoDlg(expInfo):
    """
    Show participant info dialog.
    Parameters
    ==========
    expInfo : dict
        Information about this experiment.
    
    Returns
    ==========
    dict
        Information about this experiment.
    """
    # show participant info dialog
    dlg = gui.DlgFromDict(
        dictionary=expInfo, sortKeys=False, title=expName, alwaysOnTop=True
    )
    if dlg.OK == False:
        core.quit()  # user pressed cancel
    # return expInfo
    return expInfo


def setupData(expInfo, dataDir=None):
    """
    Make an ExperimentHandler to handle trials and saving.
    
    Parameters
    ==========
    expInfo : dict
        Information about this experiment, created by the `setupExpInfo` function.
    dataDir : Path, str or None
        Folder to save the data to, leave as None to create a folder in the current directory.    
    Returns
    ==========
    psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    """
    # remove dialog-specific syntax from expInfo
    for key, val in expInfo.copy().items():
        newKey, _ = data.utils.parsePipeSyntax(key)
        expInfo[newKey] = expInfo.pop(key)
    
    # data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc
    if dataDir is None:
        dataDir = _thisDir
    filename = u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])
    # make sure filename is relative to dataDir
    if os.path.isabs(filename):
        dataDir = os.path.commonprefix([dataDir, filename])
        filename = os.path.relpath(filename, dataDir)
    
    # an ExperimentHandler isn't essential but helps with data saving
    thisExp = data.ExperimentHandler(
        name=expName, version='',
        extraInfo=expInfo, runtimeInfo=None,
        originPath='C:\\Users\\rose\\Documents\\PsychoPy Experiments\\ThresholdFinding Human\\Threshold_Finding_final021224.py',
        savePickle=True, saveWideText=True,
        dataFileName=dataDir + os.sep + filename, sortColumns='time'
    )
    thisExp.setPriority('thisRow.t', priority.CRITICAL)
    thisExp.setPriority('expName', priority.LOW)
    # return experiment handler
    return thisExp


def setupLogging(filename):
    """
    Setup a log file and tell it what level to log at.
    
    Parameters
    ==========
    filename : str or pathlib.Path
        Filename to save log file and data files as, doesn't need an extension.
    
    Returns
    ==========
    psychopy.logging.LogFile
        Text stream to receive inputs from the logging system.
    """
    # set how much information should be printed to the console / app
    if PILOTING:
        logging.console.setLevel(
            prefs.piloting['pilotConsoleLoggingLevel']
        )
    else:
        logging.console.setLevel('warning')
    # save a log file for detail verbose info
    logFile = logging.LogFile(filename+'.log')
    if PILOTING:
        logFile.setLevel(
            prefs.piloting['pilotLoggingLevel']
        )
    else:
        logFile.setLevel(
            logging.getLevel('info')
        )
    
    return logFile


def setupWindow(expInfo=None, win=None):
    """
    Setup the Window
    
    Parameters
    ==========
    expInfo : dict
        Information about this experiment, created by the `setupExpInfo` function.
    win : psychopy.visual.Window
        Window to setup - leave as None to create a new window.
    
    Returns
    ==========
    psychopy.visual.Window
        Window in which to run this experiment.
    """
    if PILOTING:
        logging.debug('Fullscreen settings ignored as running in pilot mode.')
    
    if win is None:
        # if not given a window to setup, make one
        win = visual.Window(
            size=_winSize, fullscr=_fullScr, screen=0,
            winType='pyglet', allowGUI=False, allowStencil=True,
            monitor='testMonitor', color=[0,0,0], colorSpace='rgb',
            backgroundImage='', backgroundFit='none',
            blendMode='avg', useFBO=True,
            units='height',
            checkTiming=False  # we're going to do this ourselves in a moment
        )
    else:
        # if we have a window, just set the attributes which are safe to set
        win.color = [0,0,0]
        win.colorSpace = 'rgb'
        win.backgroundImage = ''
        win.backgroundFit = 'none'
        win.units = 'height'
    if expInfo is not None:
        # get/measure frame rate if not already in expInfo
        if win._monitorFrameRate is None:
            win._monitorFrameRate = win.getActualFrameRate(infoMsg='Attempting to measure frame rate of screen, please wait...')
        expInfo['frameRate'] = win._monitorFrameRate
    win.hideMessage()
    # show a visual indicator if we're in piloting mode
    if PILOTING and prefs.piloting['showPilotingIndicator']:
        win.showPilotingIndicator()
    
    return win


def setupDevices(expInfo, thisExp, win):
    """
    Setup whatever devices are available (mouse, keyboard, speaker, eyetracker, etc.) and add them to 
    the device manager (deviceManager)
    
    Parameters
    ==========
    expInfo : dict
        Information about this experiment, created by the `setupExpInfo` function.
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    win : psychopy.visual.Window
        Window in which to run this experiment.
    Returns
    ==========
    bool
        True if completed successfully.
    """
    # --- Setup input devices ---
    ioConfig = {}
    
    # Setup iohub keyboard
    ioConfig['Keyboard'] = dict(use_keymap='psychopy')
    
    # Setup iohub experiment
    ioConfig['Experiment'] = dict(filename=thisExp.dataFileName)
    
    # Start ioHub server
    ioServer = io.launchHubServer(window=win, **ioConfig)
    
    # store ioServer object in the device manager
    deviceManager.ioServer = ioServer
    
    # create a default keyboard (e.g. to check for escape)
    if deviceManager.getDevice('defaultKeyboard') is None:
        deviceManager.addDevice(
            deviceClass='keyboard', deviceName='defaultKeyboard', backend='iohub'
        )
    # create speaker 'Beep'
    deviceManager.addDevice(
        deviceName='Beep',
        deviceClass='psychopy.hardware.speaker.SpeakerDevice',
        index=-1
    )
    if deviceManager.getDevice('key_respWelcome') is None:
        # initialise key_respWelcome
        key_respWelcome = deviceManager.addDevice(
            deviceClass='keyboard',
            deviceName='key_respWelcome',
        )
    # return True if completed successfully
    return True

def pauseExperiment(thisExp, win=None, timers=[], playbackComponents=[]):
    """
    Pause this experiment, preventing the flow from advancing to the next routine until resumed.
    
    Parameters
    ==========
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    win : psychopy.visual.Window
        Window for this experiment.
    timers : list, tuple
        List of timers to reset once pausing is finished.
    playbackComponents : list, tuple
        List of any components with a `pause` method which need to be paused.
    """
    # if we are not paused, do nothing
    if thisExp.status != PAUSED:
        return
    
    # start a timer to figure out how long we're paused for
    pauseTimer = core.Clock()
    # pause any playback components
    for comp in playbackComponents:
        comp.pause()
    # make sure we have a keyboard
    defaultKeyboard = deviceManager.getDevice('defaultKeyboard')
    if defaultKeyboard is None:
        defaultKeyboard = deviceManager.addKeyboard(
            deviceClass='keyboard',
            deviceName='defaultKeyboard',
            backend='ioHub',
        )
    # run a while loop while we wait to unpause
    while thisExp.status == PAUSED:
        # check for quit (typically the Esc key)
        if defaultKeyboard.getKeys(keyList=['escape']):
            endExperiment(thisExp, win=win)
        # sleep 1ms so other threads can execute
        clock.time.sleep(0.001)
    # if stop was requested while paused, quit
    if thisExp.status == FINISHED:
        endExperiment(thisExp, win=win)
    # resume any playback components
    for comp in playbackComponents:
        comp.play()
    # reset any timers
    for timer in timers:
        timer.addTime(-pauseTimer.getTime())


def run(expInfo, thisExp, win, globalClock=None, thisSession=None):
    """
    Run the experiment flow.
    
    Parameters
    ==========
    expInfo : dict
        Information about this experiment, created by the `setupExpInfo` function.
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    psychopy.visual.Window
        Window in which to run this experiment.
    globalClock : psychopy.core.clock.Clock or None
        Clock to get global time from - supply None to make a new one.
    thisSession : psychopy.session.Session or None
        Handle of the Session object this experiment is being run from, if any.
    """
    # mark experiment as started
    thisExp.status = STARTED
    # make sure window is set to foreground to prevent losing focus
    win.winHandle.activate()
    # make sure variables created by exec are available globally
    exec = environmenttools.setExecEnvironment(globals())
    # get device handles from dict of input devices
    ioServer = deviceManager.ioServer
    # get/create a default keyboard (e.g. to check for escape)
    defaultKeyboard = deviceManager.getDevice('defaultKeyboard')
    if defaultKeyboard is None:
        deviceManager.addDevice(
            deviceClass='keyboard', deviceName='defaultKeyboard', backend='ioHub'
        )
    eyetracker = deviceManager.getDevice('eyetracker')
    # make sure we're running in the directory for this experiment
    os.chdir(_thisDir)
    # get filename from ExperimentHandler for convenience
    filename = thisExp.dataFileName
    frameTolerance = 0.001  # how close to onset before 'same' frame
    endExpNow = False  # flag for 'escape' or other condition => quit the exp
    # get frame duration from frame rate in expInfo
    if 'frameRate' in expInfo and expInfo['frameRate'] is not None:
        frameDur = 1.0 / round(expInfo['frameRate'])
    else:
        frameDur = 1.0 / 60.0  # could not measure, so guess
    
    # Start Code - component code to be run after the window creation
    
    # --- Initialize components for Routine "ThresholdFindingStimulation" ---
    Beep = sound.Sound(
        'A', 
        secs=-1, 
        stereo=True, 
        hamming=True, 
        speaker='Beep',    name='Beep'
    )
    Beep.setVolume(0.01)
    # Run 'Begin Experiment' code from code_3
    
    #Initialize the Keysight generator
    rm = pyvisa.ResourceManager()
    visa_address = 'USB0::0x2A8D::0x8D01::CN61520069::0::INSTR'
    waveform_generator = rm.open_resource(visa_address)
    
    
    #Initialize the VISA resource manager
    rm = pyvisa.ResourceManager()
    
    #Replace with your device's VISA address
    visa_address = 'USB0::0x2A8D::0x8D01::CN61520069::0::INSTR'
    
    # Connect to the waveform generator
    waveform_generator = rm.open_resource(visa_address)
    
    # Check communication by querying the device's ID
    print(waveform_generator.query("*IDN?"))
    
    
    # Reset the instrument to a known state
    waveform_generator.write("*RST")
    time.sleep(1)  # Allow time for reset to complete
    
    
    # Create a window object (if not already created)
    win = visual.Window(size=(800, 600), color="black", units="pix")
    
    # Select the channel to use (e.g., Channel 1 or Channel 2)
    #channel = "CHAN1"  # Change to "CHAN2" if using the second channel
    #waveform_generator.write(f"INST:SEL {channel}")
    
    
    # --- Initialize components for Routine "PauseBetweenStimulation" ---
    key_respWelcome = keyboard.Keyboard(deviceName='key_respWelcome')
    
    # create some handy timers
    
    # global clock to track the time since experiment started
    if globalClock is None:
        # create a clock if not given one
        globalClock = core.Clock()
    if isinstance(globalClock, str):
        # if given a string, make a clock accoridng to it
        if globalClock == 'float':
            # get timestamps as a simple value
            globalClock = core.Clock(format='float')
        elif globalClock == 'iso':
            # get timestamps in ISO format
            globalClock = core.Clock(format='%Y-%m-%d_%H:%M:%S.%f%z')
        else:
            # get timestamps in a custom format
            globalClock = core.Clock(format=globalClock)
    if ioServer is not None:
        ioServer.syncClock(globalClock)
    logging.setDefaultClock(globalClock)
    # routine timer to track time remaining of each (possibly non-slip) routine
    routineTimer = core.Clock()
    win.flip()  # flip window to reset last flip timer
    # store the exact time the global clock started
    expInfo['expStart'] = data.getDateStr(
        format='%Y-%m-%d %Hh%M.%S.%f %z', fractionalSecondDigits=6
    )
    
    # set up handler to look after randomisation of conditions etc
    trials = data.TrialHandler2(
        name='trials',
        nReps=1.0, 
        method='random', 
        extraInfo=expInfo, 
        originPath=-1, 
        trialList=data.importConditions('SF_Fnding_Threshold_BR.xlsx'), 
        seed=None, 
    )
    thisExp.addLoop(trials)  # add the loop to the experiment
    thisTrial = trials.trialList[0]  # so we can initialise stimuli with some values
    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)
    if thisTrial != None:
        for paramName in thisTrial:
            globals()[paramName] = thisTrial[paramName]
    if thisSession is not None:
        # if running in a Session with a Liaison client, send data up to now
        thisSession.sendExperimentData()
    
    for thisTrial in trials:
        currentLoop = trials
        thisExp.timestampOnFlip(win, 'thisRow.t', format=globalClock.format)
        if thisSession is not None:
            # if running in a Session with a Liaison client, send data up to now
            thisSession.sendExperimentData()
        # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)
        if thisTrial != None:
            for paramName in thisTrial:
                globals()[paramName] = thisTrial[paramName]
        
        # --- Prepare to start Routine "ThresholdFindingStimulation" ---
        # create an object to store info about Routine ThresholdFindingStimulation
        ThresholdFindingStimulation = data.Routine(
            name='ThresholdFindingStimulation',
            components=[Beep],
        )
        ThresholdFindingStimulation.status = NOT_STARTED
        continueRoutine = True
        # update component parameters for each repeat
        Beep.setSound('A', secs=600, hamming=True)
        Beep.setVolume(0.01, log=False)
        Beep.seek(0)
        # Run 'Begin Routine' code from code_3
        # Reset the instrument to a known state
        waveform_generator.write("*RST")
        time.sleep(3)  # Allow time for reset to complete
        
        # Initialize variables
        amplitude = 0.05  # Starting amplitude
        increment = 0.05  # Amplitude increment
        decrement = 0.05  # Amplitude decrement
        increment1 = 0.005  # Amplitude increment
        decrement1 = 0.005  # Amplitude decrement
        adjusting = False  # Indicates if amplitude is being adjusted
        phase = "increase"  # Phase: 'increase' or 'decrease'
        last_adjustment_time = 0  # Track the last adjustment time
        #instruction_text.text = "Press the space bar when ready."  # Initial instruction
        
        
        # Create a window object (if not already created)
        #win = visual.Window(size=(800, 600), color="black", units="pix")
        
        # Define the instruction text
        instruction_text = visual.TextStim(win, text="Press the space bar when ready.", color="white", height=30)
        # This part would go in the "Begin Routine" section
        #text_stim = visual.TextStim(win, text="Press 'j' to start the stimulation protocol.", color="white", height=30)
        
        # Minimal setup to start stimulation
        #channel = "CHAN1"  # Change to appropriate channel
        #waveform_generator.write(f"INST:SEL {channel}")
        
        waveform_generator.write("*RST")  # Reset generator
        waveform_generator.write("OUTP OFF")  # Ensure all outputs are off
        
        # Configure the waveform based on the trial's parameters
        if waveform == "AMSIN":
            # Set up a sine wave
            waveform_generator.write("FUNC SIN")
            waveform_generator.write(f"FREQ {frequency}HZ")
            waveform_generator.write(f"VOLT {amplitude}")
            waveform_generator.write("VOLT:OFFS 0")
            waveform_generator.write("SOURce1:PHASe:ADJust 0")
            
            # Check if modulation is needed
            if modulation == "YES":
                waveform_generator.write("MOD:TYPE AM")                   # Set modulation type to AM
                waveform_generator.write("MOD:INT:FUNC SIN")
                waveform_generator.write("AM:STATE ON") # Modulation waveform to sine
                waveform_generator.write(f"AM:INT:FREQ {mod_frequency}")
                waveform_generator.write("MOD:DEPTH 100")# Fixed modulation depth of 100%
                    
        elif waveform == "SIN":
                # Set up a sine wave
            waveform_generator.write("FUNC SIN")
            #waveform_generator.write(f"FREQ {frequency}HZ")
            waveform_generator.write(f"SOUR1:FREQ {frequency}HZ")
            waveform_generator.write(f"VOLT {amplitude}")
            waveform_generator.write("VOLT:OFFS 0")
            waveform_generator.write("SOURce1:PHASe:ADJust 0")
        
        elif waveform == "TI":
            # Helper function for configuring a channel
            def configure_channel(channel, frequency, amplitude, waveform_type="SIN"):
                prefix = f"SOUR{channel}"
                waveform_generator.write(f"{prefix}:FUNC {waveform_type}")
                waveform_generator.write(f"{prefix}:FREQ {frequency}HZ")
                waveform_generator.write(f"{prefix}:VOLT {amplitude}")
                waveform_generator.write(f"{prefix}:VOLT:OFFS 0")
                #waveform_generator.write(f"OUTP{channel} ON")  # Enable output
                waveform_generator.write("SOURce1:PHASe:ADJust 0")
                waveform_generator.write("SOURce2:PHASe:ADJust 0")
        
            # Configure Channel 1
            configure_channel(1, frequency, amplitude)
            # Configure Channel 2
            configure_channel(2, frequency2, amplitude)
            
            print(f"Trial {trials.thisTrialN}: Frequency1 = {frequency}, Frequency2 = {frequency2}")
            waveform_generator.write("SOURce1:FREQ?")
            print(f"Channel 1 Frequency: {waveform_generator.query('SOURce1:FREQ?')}")
            waveform_generator.write("SOURce2:FREQ?")
            print(f"Channel 2 Frequency: {waveform_generator.query('SOURce2:FREQ?')}")
        elif waveform == "BRSIN":
                # Set up a sine wave
            waveform_generator.write("FUNC SIN")
            waveform_generator.write(f"FREQ {frequency}HZ")
            waveform_generator.write(f"VOLT {amplitude}")
            waveform_generator.write("VOLT:OFFS 0")
            waveform_generator.write("SOURce1:PHASe:ADJust 0")
            
            waveform_generator.write("BURST:MODE TRIG")  # Set burst mode to triggered
            #waveform_generator.write("BURST:NCYC {cycles}")  # Set number of cycles per burst to 125
            waveform_generator.write(f"BURST:NCYC {cycles}")
            waveform_generator.write(f"BURST:INT:PER {burstperiod}")  # Set burst period to 50 ms
            waveform_generator.write("TRIG:SOUR IMM")  # Set trigger source to immediate
            waveform_generator.write("BURST:STATE ON")  # Enable burst mode
        # Start a non-blocking timer for the stimulation
        #stim_timer = core.Clock()
        #stim_duration = 5  # Set the stimulation duration in seconds
        #last_beep_time = 0  # To track the last beep time
        
        # store start times for ThresholdFindingStimulation
        ThresholdFindingStimulation.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
        ThresholdFindingStimulation.tStart = globalClock.getTime(format='float')
        ThresholdFindingStimulation.status = STARTED
        thisExp.addData('ThresholdFindingStimulation.started', ThresholdFindingStimulation.tStart)
        ThresholdFindingStimulation.maxDuration = None
        # keep track of which components have finished
        ThresholdFindingStimulationComponents = ThresholdFindingStimulation.components
        for thisComponent in ThresholdFindingStimulation.components:
            thisComponent.tStart = None
            thisComponent.tStop = None
            thisComponent.tStartRefresh = None
            thisComponent.tStopRefresh = None
            if hasattr(thisComponent, 'status'):
                thisComponent.status = NOT_STARTED
        # reset timers
        t = 0
        _timeToFirstFrame = win.getFutureFlipTime(clock="now")
        frameN = -1
        
        # --- Run Routine "ThresholdFindingStimulation" ---
        # if trial has changed, end Routine now
        if isinstance(trials, data.TrialHandler2) and thisTrial.thisN != trials.thisTrial.thisN:
            continueRoutine = False
        ThresholdFindingStimulation.forceEnded = routineForceEnded = not continueRoutine
        while continueRoutine and routineTimer.getTime() < 600.0:
            # get current time
            t = routineTimer.getTime()
            tThisFlip = win.getFutureFlipTime(clock=routineTimer)
            tThisFlipGlobal = win.getFutureFlipTime(clock=None)
            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
            # update/draw components on each frame
            
            # *Beep* updates
            
            # if Beep is starting this frame...
            if Beep.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
                # keep track of start time/frame for later
                Beep.frameNStart = frameN  # exact frame index
                Beep.tStart = t  # local t and not account for scr refresh
                Beep.tStartRefresh = tThisFlipGlobal  # on global time
                # add timestamp to datafile
                thisExp.addData('Beep.started', tThisFlipGlobal)
                # update status
                Beep.status = STARTED
                Beep.play(when=win)  # sync with win flip
            
            # if Beep is stopping this frame...
            if Beep.status == STARTED:
                # is it time to stop? (based on global clock, using actual start)
                if tThisFlipGlobal > Beep.tStartRefresh + 600-frameTolerance or Beep.isFinished:
                    # keep track of stop time/frame for later
                    Beep.tStop = t  # not accounting for scr refresh
                    Beep.tStopRefresh = tThisFlipGlobal  # on global time
                    Beep.frameNStop = frameN  # exact frame index
                    # add timestamp to datafile
                    thisExp.timestampOnFlip(win, 'Beep.stopped')
                    # update status
                    Beep.status = FINISHED
                    Beep.stop()
            # Run 'Each Frame' code from code_3
            #elapsed_time = stim_timer.getTime()  # Time since the start of the stimulation routine
            
            # Update the beep every second
            #if int(elapsed_time) != last_beep_time:
                #beep_sound.play()  # Play beep sound
                #last_beep_time = int(elapsed_time)  # Update last beep time
            
            # Display stimulation text box, if needed
            #stimulation_text.text = "Stimulation ongoing..."  # Update this to your desired message
            
            # Check if the stimulation period has ended
            #if elapsed_time >= stim_duration:
                #waveform_generator.write("OUTP OFF")  # Stop the generator output
                #waveform_generator.close()
                #rm.close()
                #continueRoutine = False  # End stimulation routine
                
                # Initialize amplitude at the start of the trial
            
            # Check for key presses
            keys = event.getKeys()
            
            # Handle space bar to start/stop adjustments
            if 'space' in keys:
                # Toggle adjusting state
                adjusting = not adjusting
            
                # Turn on outputs based on waveform condition
                if adjusting:  # If starting adjustment
                    if waveform == "TI":  
                        # Turn on both channels explicitly
                        #waveform_generator.write("INST:SEL CHAN1")  # Select Channel 1
                        #waveform_generator.write("OUTP ON")  # Turn on Channel 1
                        #waveform_generator.write("INST:SEL CHAN2")  # Select Channel 2
                        #waveform_generator.write("OUTP ON")  # Turn on Channel 2
                        waveform_generator.write("OUTP1 ON")  # Turn on Channel 1
                        waveform_generator.write("OUTP2 ON")  # Turn on Channel 2
                       
                        
                    else:  # For SINE and PULSE
                        
                        #waveform_generator.write("INST:SEL CHAN1")  # Select Channel 1
                        #waveform_generator.write("OUTP ON")  # Turn on Channel 1
                        waveform_generator.write("OUTP1 ON")
                else:  # If stopping adjustment
                        waveform_generator.write("OUTP1 OFF")  # Turn on Channel 1
                        waveform_generator.write("OUTP2 OFF")  # Turn off all outputs
            
            # Handle automatic amplitude adjustment
            #if adjusting and t - last_adjustment_time >= 1:  # Adjust every second
                #last_adjustment_time = t  # Update the last adjustment time
            
                # Increment or decrement amplitude based on phase
                #if phase == "increase":
                    #amplitude += increment
                #elif phase == "decrease":
                    #amplitude -= decrement
            
                # Apply amplitude changes
                #if waveform == "TI":
                    # Update both channels for TI condition
                   #waveform_generator.write("INST:SEL CHAN1")  # Select Channel 1
                    #waveform_generator.write(f"VOLT {amplitude}")  # Update amplitude for Channel 1
                    #waveform_generator.write("INST:SEL CHAN2")  # Select Channel 2
                    #waveform_generator.write(f"VOLT {amplitude}")  # Update amplitude for Channel 2
                # Adjust amplitude for both channels
                    #waveform_generator.write(f"SOUR1:VOLT {amplitude:.3f}")  # Update Channel 1
                    #waveform_generator.write(f"SOUR2:VOLT {amplitude:.3f}")  # Update Channel 2
            #else:
                # Adjust amplitude for single-channel conditions (SIN or PULSE)
                #waveform_generator.write(f"VOLT {amplitude:.3f}")
                 #waveform_generator.write(f"VOLT {amplitude:.3f}")
            
                #else:  # For SIN or PULSE, adjust only Channel 1
                    #waveform_generator.write("INST:SEL CHAN1")  # Select Channel 1
                    #waveform_generator.write(f"VOLT {amplitude}")  # Update amplitude for Channel 1
            
            if adjusting and (globalClock.getTime() - last_adjustment_time) >= 0.5 and frequency >= 5000:
                last_adjustment_time = globalClock.getTime()
                if phase == "increase":
                    amplitude += increment
                elif phase == "decrease":
                    amplitude -= decrement
            
                # Apply updated amplitude to the generator
                if waveform == "TI":
                    waveform_generator.write(f"SOUR1:VOLT {amplitude:.3f}")  # Channel 1
                    waveform_generator.write(f"SOUR2:VOLT {amplitude:.3f}")  # Channel 2
                else:
                    waveform_generator.write(f"VOLT {amplitude:.3f}")
                print(f"Amplitude updated: {amplitude:.3f} V")
             
            if adjusting and (globalClock.getTime() - last_adjustment_time) >= 0.5 and frequency < 5000:
                    last_adjustment_time = globalClock.getTime()
                    if phase == "increase":
                        amplitude += increment1
                    elif phase == "decrease":
                        amplitude -= decrement1
            
                    # Apply updated amplitude to the generator
                    if waveform == "TI":
                        waveform_generator.write(f"SOUR1:VOLT {amplitude:.3f}")  # Channel 1
                        waveform_generator.write(f"SOUR2:VOLT {amplitude:.3f}")  # Channel 2
                    else:
                        waveform_generator.write(f"VOLT {amplitude:.3f}")
                    print(f"Amplitude updated: {amplitude:.3f} V")    
            
                # Handle enter to switch from increase to decrease phase
            if 'b' in keys and phase == "increase" and not adjusting:
                phase = "decrease"
                instruction_text.text = "Amplitude decreasing... Press space to stop."
                adjusting = False  # Reset adjusting state
                
                # Handle enter to switch from increase to decrease phase
            if 'z' in keys and phase == "decrease" and not adjusting:
                phase = "increase"
                instruction_text.text = "Amplitude increasing... Press space to stop."
                adjusting = False  # Reset adjusting state
            
            if 'q' in keys:
                # Turn off the waveform generator
                waveform_generator.write("OUTP1 OFF; OUTP2 OFF")
                continueRoutine = False
            
            if 't' in keys:
                adjusting=False
                
            if 'o' in keys:
                adjusting=True
             
            # If "n" is pressed, move to the next routine
            #if "n" in keys:
            # continueRoutine = False
            #print("Stimulation interrupted by key press. Moving to the next routine.")
            
            # If "escape" is pressed, quit the experiment
            #if "escape" in keys:
            #waveform_generator.close()
               
            
            
            # Draw the updated instruction text
            instruction_text.draw()
            win.flip()  # Update the screen
            
            
            
            # check for quit (typically the Esc key)
            if defaultKeyboard.getKeys(keyList=["escape"]):
                thisExp.status = FINISHED
            if thisExp.status == FINISHED or endExpNow:
                endExperiment(thisExp, win=win)
                return
            # pause experiment here if requested
            if thisExp.status == PAUSED:
                pauseExperiment(
                    thisExp=thisExp, 
                    win=win, 
                    timers=[routineTimer], 
                    playbackComponents=[Beep]
                )
                # skip the frame we paused on
                continue
            
            # check if all components have finished
            if not continueRoutine:  # a component has requested a forced-end of Routine
                ThresholdFindingStimulation.forceEnded = routineForceEnded = True
                break
            continueRoutine = False  # will revert to True if at least one component still running
            for thisComponent in ThresholdFindingStimulation.components:
                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                    continueRoutine = True
                    break  # at least one component has not yet finished
            
            # refresh the screen
            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
                win.flip()
        
        # --- Ending Routine "ThresholdFindingStimulation" ---
        for thisComponent in ThresholdFindingStimulation.components:
            if hasattr(thisComponent, "setAutoDraw"):
                thisComponent.setAutoDraw(False)
        # store stop times for ThresholdFindingStimulation
        ThresholdFindingStimulation.tStop = globalClock.getTime(format='float')
        ThresholdFindingStimulation.tStopRefresh = tThisFlipGlobal
        thisExp.addData('ThresholdFindingStimulation.stopped', ThresholdFindingStimulation.tStop)
        Beep.pause()  # ensure sound has stopped at end of Routine
        # Run 'End Routine' code from code_3
        # Turn off the output after the duration
        #waveform_generator.write("OUTP OFF")
        #print("Stimulation stopped.")
        
        # Turn off the waveform generator
        waveform_generator.write("OUTP1 OFF; OUTP2 OFF")
        # Print trial parameters
        trial_parameters = {
            "Waveform": waveform,
            "Frequency1": frequency,
            "Frequency2": frequency2
            }
        
        print("Trial Parameters:")
        for key, value in trial_parameters.items():
            print(f"{key}: {value}")
        
        
        # Save threshold amplitude to PsychoPy results file
        if phase == "decrease" and not adjusting:
            thisExp.addData('Threshold Amplitude', amplitude)
            print(f"Threshold detected: {amplitude:.3f} V")
        
        # Parameters used in the last stimulation
        #parameters = {
           # "Waveform": waveform,
           # "Frequency (Hz)": frequency,
           # "Amplitude (V)": amplitude,
           # "Modulation": modulation,
            #"DC Offset": DC_offset,
            #"Amplitude Real": amplitude_actual
            
        #}
        
        # If modulation was applied, add modulation parameters
        #if waveform == "SIN" and modulation == "YES":
           # parameters.update({
              #  "Modulation Frequency (Hz)": mod_frequency,
               # "Modulation Depth (%)": 100
            #})
        
        # If the waveform is pulse, add pulse-specific parameters
        #if waveform == "PULSE":
           # parameters.update({
                #"Pulse Width (seconds)": pulse_width,
                # The period is automatically defined by frequency, for reference:
                #"Pulse Period (seconds)": 1 / frequency
           # })
        
        # Print the parameters to the console
        #print("Stimulation Parameters:")
        #for key, value in parameters.items():
            #print(f"{key}: {value}")
        
        # Close the connection
        #waveform_generator.close()
        # using non-slip timing so subtract the expected duration of this Routine (unless ended on request)
        if ThresholdFindingStimulation.maxDurationReached:
            routineTimer.addTime(-ThresholdFindingStimulation.maxDuration)
        elif ThresholdFindingStimulation.forceEnded:
            routineTimer.reset()
        else:
            routineTimer.addTime(-600.000000)
        
        # --- Prepare to start Routine "PauseBetweenStimulation" ---
        # create an object to store info about Routine PauseBetweenStimulation
        PauseBetweenStimulation = data.Routine(
            name='PauseBetweenStimulation',
            components=[key_respWelcome],
        )
        PauseBetweenStimulation.status = NOT_STARTED
        continueRoutine = True
        # update component parameters for each repeat
        # Run 'Begin Routine' code from code_15
        instruction_text = visual.TextStim(
            win=win,
            text="Push enter to continue to the next trial",
            color="white",  # Make the text white
            height=0.05,
            pos=(0, 0)
            )
        
        # Draw the instruction text
        instruction_text.draw()
        win.flip() 
        # create starting attributes for key_respWelcome
        key_respWelcome.keys = []
        key_respWelcome.rt = []
        _key_respWelcome_allKeys = []
        # store start times for PauseBetweenStimulation
        PauseBetweenStimulation.tStartRefresh = win.getFutureFlipTime(clock=globalClock)
        PauseBetweenStimulation.tStart = globalClock.getTime(format='float')
        PauseBetweenStimulation.status = STARTED
        thisExp.addData('PauseBetweenStimulation.started', PauseBetweenStimulation.tStart)
        PauseBetweenStimulation.maxDuration = None
        # keep track of which components have finished
        PauseBetweenStimulationComponents = PauseBetweenStimulation.components
        for thisComponent in PauseBetweenStimulation.components:
            thisComponent.tStart = None
            thisComponent.tStop = None
            thisComponent.tStartRefresh = None
            thisComponent.tStopRefresh = None
            if hasattr(thisComponent, 'status'):
                thisComponent.status = NOT_STARTED
        # reset timers
        t = 0
        _timeToFirstFrame = win.getFutureFlipTime(clock="now")
        frameN = -1
        
        # --- Run Routine "PauseBetweenStimulation" ---
        # if trial has changed, end Routine now
        if isinstance(trials, data.TrialHandler2) and thisTrial.thisN != trials.thisTrial.thisN:
            continueRoutine = False
        PauseBetweenStimulation.forceEnded = routineForceEnded = not continueRoutine
        while continueRoutine:
            # get current time
            t = routineTimer.getTime()
            tThisFlip = win.getFutureFlipTime(clock=routineTimer)
            tThisFlipGlobal = win.getFutureFlipTime(clock=None)
            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)
            # update/draw components on each frame
            # Run 'Each Frame' code from code_15
            win.flip()
            
            # Check for key presses
            keys = event.getKeys(keyList=["return"])  # Check for the "enter" key
            
            # Proceed to the next routine if "enter" is pressed
            if "return" in keys:
                continue_trial = True
                continueRoutine = False
            
            # *key_respWelcome* updates
            waitOnFlip = False
            
            # if key_respWelcome is starting this frame...
            if key_respWelcome.status == NOT_STARTED and tThisFlip >= 0.0-frameTolerance:
                # keep track of start time/frame for later
                key_respWelcome.frameNStart = frameN  # exact frame index
                key_respWelcome.tStart = t  # local t and not account for scr refresh
                key_respWelcome.tStartRefresh = tThisFlipGlobal  # on global time
                win.timeOnFlip(key_respWelcome, 'tStartRefresh')  # time at next scr refresh
                # add timestamp to datafile
                thisExp.timestampOnFlip(win, 'key_respWelcome.started')
                # update status
                key_respWelcome.status = STARTED
                # keyboard checking is just starting
                waitOnFlip = True
                win.callOnFlip(key_respWelcome.clock.reset)  # t=0 on next screen flip
                win.callOnFlip(key_respWelcome.clearEvents, eventType='keyboard')  # clear events on next screen flip
            if key_respWelcome.status == STARTED and not waitOnFlip:
                theseKeys = key_respWelcome.getKeys(keyList=['return'], ignoreKeys=["escape"], waitRelease=False)
                _key_respWelcome_allKeys.extend(theseKeys)
                if len(_key_respWelcome_allKeys):
                    key_respWelcome.keys = _key_respWelcome_allKeys[-1].name  # just the last key pressed
                    key_respWelcome.rt = _key_respWelcome_allKeys[-1].rt
                    key_respWelcome.duration = _key_respWelcome_allKeys[-1].duration
                    # a response ends the routine
                    continueRoutine = False
            
            # check for quit (typically the Esc key)
            if defaultKeyboard.getKeys(keyList=["escape"]):
                thisExp.status = FINISHED
            if thisExp.status == FINISHED or endExpNow:
                endExperiment(thisExp, win=win)
                return
            # pause experiment here if requested
            if thisExp.status == PAUSED:
                pauseExperiment(
                    thisExp=thisExp, 
                    win=win, 
                    timers=[routineTimer], 
                    playbackComponents=[]
                )
                # skip the frame we paused on
                continue
            
            # check if all components have finished
            if not continueRoutine:  # a component has requested a forced-end of Routine
                PauseBetweenStimulation.forceEnded = routineForceEnded = True
                break
            continueRoutine = False  # will revert to True if at least one component still running
            for thisComponent in PauseBetweenStimulation.components:
                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:
                    continueRoutine = True
                    break  # at least one component has not yet finished
            
            # refresh the screen
            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen
                win.flip()
        
        # --- Ending Routine "PauseBetweenStimulation" ---
        for thisComponent in PauseBetweenStimulation.components:
            if hasattr(thisComponent, "setAutoDraw"):
                thisComponent.setAutoDraw(False)
        # store stop times for PauseBetweenStimulation
        PauseBetweenStimulation.tStop = globalClock.getTime(format='float')
        PauseBetweenStimulation.tStopRefresh = tThisFlipGlobal
        thisExp.addData('PauseBetweenStimulation.stopped', PauseBetweenStimulation.tStop)
        # check responses
        if key_respWelcome.keys in ['', [], None]:  # No response was made
            key_respWelcome.keys = None
        trials.addData('key_respWelcome.keys',key_respWelcome.keys)
        if key_respWelcome.keys != None:  # we had a response
            trials.addData('key_respWelcome.rt', key_respWelcome.rt)
            trials.addData('key_respWelcome.duration', key_respWelcome.duration)
        # the Routine "PauseBetweenStimulation" was not non-slip safe, so reset the non-slip timer
        routineTimer.reset()
        thisExp.nextEntry()
        
    # completed 1.0 repeats of 'trials'
    
    if thisSession is not None:
        # if running in a Session with a Liaison client, send data up to now
        thisSession.sendExperimentData()
    # Run 'End Experiment' code from code_3
    
    #Close the connection
    waveform_generator.close()
    
    # mark experiment as finished
    endExperiment(thisExp, win=win)


def saveData(thisExp):
    """
    Save data from this experiment
    
    Parameters
    ==========
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    """
    filename = thisExp.dataFileName
    # these shouldn't be strictly necessary (should auto-save)
    thisExp.saveAsWideText(filename + '.csv', delim='auto')
    thisExp.saveAsPickle(filename)


def endExperiment(thisExp, win=None):
    """
    End this experiment, performing final shut down operations.
    
    This function does NOT close the window or end the Python process - use `quit` for this.
    
    Parameters
    ==========
    thisExp : psychopy.data.ExperimentHandler
        Handler object for this experiment, contains the data to save and information about 
        where to save it to.
    win : psychopy.visual.Window
        Window for this experiment.
    """
    if win is not None:
        # remove autodraw from all current components
        win.clearAutoDraw()
        # Flip one final time so any remaining win.callOnFlip() 
        # and win.timeOnFlip() tasks get executed
        win.flip()
    # return console logger level to WARNING
    logging.console.setLevel(logging.WARNING)
    # mark experiment handler as finished
    thisExp.status = FINISHED
    logging.flush()


def quit(thisExp, win=None, thisSession=None):
    """
    Fully quit, closing the window and ending the Python process.
    
    Parameters
    ==========
    win : psychopy.visual.Window
        Window to close.
    thisSession : psychopy.session.Session or None
        Handle of the Session object this experiment is being run from, if any.
    """
    thisExp.abort()  # or data files will save again on exit
    # make sure everything is closed down
    if win is not None:
        # Flip one final time so any remaining win.callOnFlip() 
        # and win.timeOnFlip() tasks get executed before quitting
        win.flip()
        win.close()
    logging.flush()
    if thisSession is not None:
        thisSession.stop()
    # terminate Python process
    core.quit()


# if running this experiment as a script...
if __name__ == '__main__':
    # call all functions in order
    expInfo = showExpInfoDlg(expInfo=expInfo)
    thisExp = setupData(expInfo=expInfo)
    logFile = setupLogging(filename=thisExp.dataFileName)
    win = setupWindow(expInfo=expInfo)
    setupDevices(expInfo=expInfo, thisExp=thisExp, win=win)
    run(
        expInfo=expInfo, 
        thisExp=thisExp, 
        win=win,
        globalClock='float'
    )
    saveData(thisExp=thisExp)
    quit(thisExp=thisExp, win=win)
